{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,SAAWC,SAASC,cAAc,UAoCpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEnBA,E,IA3CRN,EAAKC,SAASa,iBAAiB,UAE/B,SAAsBC,GACpBA,EAAIC,iBAOJ,IALA,IAA4BC,EAAAF,EAAIG,cAAcC,SAAvCC,EAAqBH,EAArBX,MAAMe,EAAeJ,EAAfI,KAAKC,EAAUL,EAAVK,OACZC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEzBG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACFxB,EAAcwB,EAAUL,GACvBM,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAAjC,GAASkC,OAAOI,QAAQ,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAIzEF,EAAcwB,EAAUL,EAAaG,GAAaE,EAAW,IACxDC,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAAjC,GAASkC,OAAOI,QAAQ,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAKzEN,EAAKC,SAASoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  mainForm : document.querySelector('.form'),\n}\nrefs.mainForm.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt){\n  evt.preventDefault();\n\n  const {delay,step,amount} = evt.currentTarget.elements;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1){\n    if (position === 1) {\n      createPromise(position, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  else{\n    createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      }\n    }\n\n    refs.mainForm.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve,reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n      },delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","mainForm","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.146a39e5.js.map"}